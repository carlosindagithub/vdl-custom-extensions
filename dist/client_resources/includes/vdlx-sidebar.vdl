<vdl version="4.1">

    <style>
        /*
            make page full-height
        */
        body, #main, vdl-page {
            height: 100%;
        }

        body {
            margin: 0;
        }

        vdl-column.with-sidebar, .with-sidebar .column-body {
            display: flex;
            align-items: stretch;
        }

        vdlx-sidebar {
            display: flex;
            height: 100%;
        }

        vdlx-sidebar #container-sidebar {
            min-width: 60px; /* 300px */
            width: 60px; /* 300px */
            height: 100%;
            flex-grow: 0;
            flex-shrink: 0;
        }

        vdlx-sidebar .views {
            flex-grow: 1;
            flex-shrink: 1;
        }

        vdlx-sidebar #container-sidebar.expanded {
            min-width: 240px; /* 300px */
            width: 240px; /* 300px */
        }

        vdlx-sidebar .views.expanded {
        }

        vdlx-sidebar .sidebar {
            position: initial;
        }

        .sidebar .header {
            min-width: 230px;
        }

        i.sidebar-left {
            width: 20px;
            height: 20px;
            display: block;
            background: no-repeat url(includes/chevron-left.png);
            background-size: 75%;
        }

        i.sidebar-right {
            width: 20px;
            height: 20px;
            display: block;
            background: no-repeat url(includes/chevron-right.png);
            background-size: 75%;
        }

        .mini-submenu {
            display: block;
        }
    </style>

    <script>

        var currentView = VDL.createVariable();
        currentView.subscribe(function (view) {
            console.log('[sidebar] currentView', view);
        });

        var menuItems = ko.observableArray();

        VDL('vdlx-sidebar-section', {
            tag: 'vdlx-sidebar-section',
            modifiesDescendants: false,
            template: '<vdl-section  data-bind="if: $component.showSection"><vdl-contents></vdl-contents></vdl-section>',
            createViewModel: function (params, componentInfo, vmApi) {
                var vm = {
                    vars: params.vars
                };
                // debugger;
                params.registerMenuItem(params.name, 'menu', params.sectionId);
                vm.showSection = VDL.createVariable(false);

                /*
                 * hide or show this sidebar-section depending on active
                 */
                vm.revealActive = function (selectId) {
                    console.log('[sidebar] vss::revealActive', selectId, params.sectionId);
                    vm.showSection(selectId === params.sectionId);
                };

                currentView.subscribe(vm.revealActive);
                console.log('[sidebar] vss:createVM', params);
                return vm;
            },
            transform: function (element, attrs, api) {
                var id = _.get(attrs, 'id.rawValue', api.createId('sidebar-menuitem-'));
                if ($(element).attr('id') !== id) {
                    $(element).attr('id', id);
                }

                var paramsBuilder = api.getComponentParamsBuilder(element)
                    .addParentCallbackParam('registerMenuItem');
                paramsBuilder.addParam('name', _.get(attrs, 'heading.rawValue', id || 'no-name'));
                paramsBuilder.addParam('sectionId', id);
                paramsBuilder.addParam(
                    'vars',
                    '$root.vars',
                    true
                );
            }
        });

        VDL('vdlx-sidebar-header', {
            tag: 'vdlx-sidebar-header',
            modifiesDescendants: false,
            createViewModel: function (params, componentInfo, vmApi) {
                var vm = {};
                params.registerMenuItem(params.name, 'header', undefined);
                return vm;
            },
            transform: function (element, attrs, api) {
                var paramsBuilder = api.getComponentParamsBuilder(element)
                    .addParentCallbackParam('registerMenuItem');
                paramsBuilder.addParam('name', $(element).text() || 'no heading text');
                $(element).hide();
            }
        });

        VDL('vdlx-sidebar-divider', {
            tag: 'vdlx-sidebar-divider',
            modifiesDescendants: false,
            createViewModel: function (params, componentInfo, vmApi) {
                var vm = {};
                params.registerMenuItem(undefined, 'divider', undefined);
                return vm;
            },
            transform: function (element, attrs, api) {
                var paramsBuilder = api.getComponentParamsBuilder(element)
                    .addParentCallbackParam('registerMenuItem');
                $(element).hide();
            }
        });

        var template = '<div id="container-sidebar" data-bind="css: {expanded: expanded}">\n' +
            '                    <div class="sidebar-collapse mini-submenu" data-bind="click: expandNav, visible: !expanded()">\n' +
            '                        <span><i class="sidebar-right" title="Expand"></i></span>\n' +
            '                    </div>\n' +
            '                    <ul class="sidebar compact-sidebar list-group" data-bind="visible: expanded()" style="">\n' +
            '\t\t\t\t\t<span class="pull-right" id="slide-submenu" title="Collapse" data-bind="visible: expanded(), click: collapseNav">\n' +
            '\t\t\t\t\t\t<i class="sidebar-left"></i>\n' +
            '\t\t\t\t\t</span>\n' +
            '\t\t\t\t\t<!-- ko foreach: menuItems -->\n' +
            '                        <!-- ko if: $data.type === \'menu\' -->\n' +
            '\t\t\t\t\t    <li data-bind="css: {active: $data.active}">\n' +
            '                            <a href="#" data-bind="text: $data.name, click: $component.menuChoice">_</a>\n' +
            '                        </li>\n' +
            '\t\t\t\t\t    <!-- /ko -->\n' +
            '                        <!-- ko if: $data.type === \'divider\' -->\n' +
            '\t\t\t\t\t    <li class="nav-side-divider"></li>\n' +
            '\t\t\t\t\t    <!-- /ko -->\n' +
            '                        <!-- ko if: $data.type === \'header\' -->\n' +
            '\t\t\t\t\t    <li class="header" data-bind="text: $data.name"></li>\n' +
            '\t\t\t\t\t    <!-- /ko -->\n' +
            '\t\t\t\t\t<!-- /ko -->\n' +
            '                    </ul>\n' +
            '            </div>\n' +
            '            <div class="views" data-bind="css: {expanded: expanded}">\n' +
            '                <vdl-contents></vdl-contents>\n' +
            '            </div>';

        VDL('vdlx-sidebar', {
            tag: 'vdlx-sidebar',
            template: template,
            createViewModel: function (params, componentInfo, vmApi) {
                var init = false;
                var sidebarId = params.sidebarId;
                var sidebarIdExpanded = sidebarId + "-expanded";
                var prevPage = window.sessionStorage.getItem(sidebarId);
                console.log('[sidebar] vs::createViewModel', sidebarId, currentView());
                var vm = {};
                /*
                 *  child components call this function to register themselves in the menu.
                 *  @param {string} name the name to be used as the visible menu text
                 *  @param {string} type menu|divider|heading
                 *  @param {string} id DOM node identifier
                 */
                vm.registerMenuItem = function (name, type, id) {
                    var menuItemData = {name: name, type: type, link: id};
                    if (!init && (type === 'menu')) { // the first item with type === 'menu' becomes the active menu
                        if (!prevPage) {
                            menuItemData.active = true;
                            init = true;
                        } else {
                            if (menuItemData.link === prevPage) {
                                menuItemData.active = true;
                                init = true;
                            }
                        }
                    } else {
                        menuItemData.active = false;
                    }
                    console.log('[sidebar] registerMenuItem', menuItemData);
                    menuItems.push(menuItemData);
                    if (menuItemData.active) {
                        _.delay(function () {
                            currentView(menuItemData.link);
                        });
                    }
                };

                /*
                 *   data = {name, type, link, active?}
                 */
                vm.menuChoice = function (data) {
                    if (!data.active) {
                        menuItems(menuItems().map(function (item) {
                            var result;
                            if (data.name === item.name) {
                                result = _.defaults({active: true}, item);
                                currentView(item.link);
                                window.sessionStorage.setItem(sidebarId, item.link);
                            } else {
                                result = _.omit(item, 'active');
                            }
                            return result;
                        }));
                    }
                };

                vm.expanded = VDL.createVariable(window.sessionStorage.getItem(sidebarIdExpanded) === null ? true : window.sessionStorage.getItem(sidebarIdExpanded) === 'true');
                vm.expandNav = function () {
                    vm.expanded(true);
                    window.sessionStorage.setItem(sidebarIdExpanded, true);
                };

                vm.collapseNav = function () {
                    vm.expanded(false);
                    window.sessionStorage.setItem(sidebarIdExpanded, false);
                };

                return vm;
            },
            transform: function (element, attrs, api) {
                var id = _.get(attrs, 'id.rawValue', api.createId('sidebar-'));
                if ($(element).attr('id') !== id) {
                    $(element).attr('id', id);
                }
                var paramsBuilder = api.getComponentParamsBuilder(element);
                paramsBuilder.addParam('sidebarId', id);
            }
        })
        ;
    </script>
</vdl>
